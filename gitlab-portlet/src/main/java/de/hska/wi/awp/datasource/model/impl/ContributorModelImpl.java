package de.hska.wi.awp.datasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.hska.wi.awp.datasource.model.Contributor;
import de.hska.wi.awp.datasource.model.ContributorModel;
import de.hska.wi.awp.datasource.model.ContributorSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Contributor service. Represents a row in the &quot;gitlab_Contributor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.model.ContributorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContributorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContributorImpl
 * @see de.hska.wi.awp.datasource.model.Contributor
 * @see de.hska.wi.awp.datasource.model.ContributorModel
 * @generated
 */
@JSON(strict = true)
public class ContributorModelImpl extends BaseModelImpl<Contributor>
    implements ContributorModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contributor model instance should use the {@link de.hska.wi.awp.datasource.model.Contributor} interface instead.
     */
    public static final String TABLE_NAME = "gitlab_Contributor";
    public static final Object[][] TABLE_COLUMNS = {
            { "contributorId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "commits", Types.INTEGER },
            { "locAdditions", Types.INTEGER },
            { "locDeletions", Types.INTEGER },
            { "projectName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table gitlab_Contributor (contributorId LONG not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,commits INTEGER,locAdditions INTEGER,locDeletions INTEGER,projectName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table gitlab_Contributor";
    public static final String ORDER_BY_JPQL = " ORDER BY contributor.contributorId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY gitlab_Contributor.contributorId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.model.Contributor"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.model.Contributor"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.hska.wi.awp.datasource.model.Contributor"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long CONTRIBUTORID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.model.Contributor"));
    private static ClassLoader _classLoader = Contributor.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Contributor.class
        };
    private long _contributorId;
    private String _name;
    private String _originalName;
    private String _email;
    private int _commits;
    private int _locAdditions;
    private int _locDeletions;
    private String _projectName;
    private long _columnBitmask;
    private Contributor _escapedModel;

    public ContributorModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Contributor toModel(ContributorSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Contributor model = new ContributorImpl();

        model.setContributorId(soapModel.getContributorId());
        model.setName(soapModel.getName());
        model.setEmail(soapModel.getEmail());
        model.setCommits(soapModel.getCommits());
        model.setLocAdditions(soapModel.getLocAdditions());
        model.setLocDeletions(soapModel.getLocDeletions());
        model.setProjectName(soapModel.getProjectName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Contributor> toModels(ContributorSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Contributor> models = new ArrayList<Contributor>(soapModels.length);

        for (ContributorSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _contributorId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setContributorId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _contributorId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Contributor.class;
    }

    @Override
    public String getModelClassName() {
        return Contributor.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("contributorId", getContributorId());
        attributes.put("name", getName());
        attributes.put("email", getEmail());
        attributes.put("commits", getCommits());
        attributes.put("locAdditions", getLocAdditions());
        attributes.put("locDeletions", getLocDeletions());
        attributes.put("projectName", getProjectName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long contributorId = (Long) attributes.get("contributorId");

        if (contributorId != null) {
            setContributorId(contributorId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        Integer commits = (Integer) attributes.get("commits");

        if (commits != null) {
            setCommits(commits);
        }

        Integer locAdditions = (Integer) attributes.get("locAdditions");

        if (locAdditions != null) {
            setLocAdditions(locAdditions);
        }

        Integer locDeletions = (Integer) attributes.get("locDeletions");

        if (locDeletions != null) {
            setLocDeletions(locDeletions);
        }

        String projectName = (String) attributes.get("projectName");

        if (projectName != null) {
            setProjectName(projectName);
        }
    }

    @JSON
    @Override
    public long getContributorId() {
        return _contributorId;
    }

    @Override
    public void setContributorId(long contributorId) {
        _contributorId = contributorId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    @Override
    public int getCommits() {
        return _commits;
    }

    @Override
    public void setCommits(int commits) {
        _commits = commits;
    }

    @JSON
    @Override
    public int getLocAdditions() {
        return _locAdditions;
    }

    @Override
    public void setLocAdditions(int locAdditions) {
        _locAdditions = locAdditions;
    }

    @JSON
    @Override
    public int getLocDeletions() {
        return _locDeletions;
    }

    @Override
    public void setLocDeletions(int locDeletions) {
        _locDeletions = locDeletions;
    }

    @JSON
    @Override
    public String getProjectName() {
        if (_projectName == null) {
            return StringPool.BLANK;
        } else {
            return _projectName;
        }
    }

    @Override
    public void setProjectName(String projectName) {
        _projectName = projectName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Contributor.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Contributor toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Contributor) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContributorImpl contributorImpl = new ContributorImpl();

        contributorImpl.setContributorId(getContributorId());
        contributorImpl.setName(getName());
        contributorImpl.setEmail(getEmail());
        contributorImpl.setCommits(getCommits());
        contributorImpl.setLocAdditions(getLocAdditions());
        contributorImpl.setLocDeletions(getLocDeletions());
        contributorImpl.setProjectName(getProjectName());

        contributorImpl.resetOriginalValues();

        return contributorImpl;
    }

    @Override
    public int compareTo(Contributor contributor) {
        long primaryKey = contributor.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Contributor)) {
            return false;
        }

        Contributor contributor = (Contributor) obj;

        long primaryKey = contributor.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContributorModelImpl contributorModelImpl = this;

        contributorModelImpl._originalName = contributorModelImpl._name;

        contributorModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Contributor> toCacheModel() {
        ContributorCacheModel contributorCacheModel = new ContributorCacheModel();

        contributorCacheModel.contributorId = getContributorId();

        contributorCacheModel.name = getName();

        String name = contributorCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            contributorCacheModel.name = null;
        }

        contributorCacheModel.email = getEmail();

        String email = contributorCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            contributorCacheModel.email = null;
        }

        contributorCacheModel.commits = getCommits();

        contributorCacheModel.locAdditions = getLocAdditions();

        contributorCacheModel.locDeletions = getLocDeletions();

        contributorCacheModel.projectName = getProjectName();

        String projectName = contributorCacheModel.projectName;

        if ((projectName != null) && (projectName.length() == 0)) {
            contributorCacheModel.projectName = null;
        }

        return contributorCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{contributorId=");
        sb.append(getContributorId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", commits=");
        sb.append(getCommits());
        sb.append(", locAdditions=");
        sb.append(getLocAdditions());
        sb.append(", locDeletions=");
        sb.append(getLocDeletions());
        sb.append(", projectName=");
        sb.append(getProjectName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.model.Contributor");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>contributorId</column-name><column-value><![CDATA[");
        sb.append(getContributorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>commits</column-name><column-value><![CDATA[");
        sb.append(getCommits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locAdditions</column-name><column-value><![CDATA[");
        sb.append(getLocAdditions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>locDeletions</column-name><column-value><![CDATA[");
        sb.append(getLocDeletions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectName</column-name><column-value><![CDATA[");
        sb.append(getProjectName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}

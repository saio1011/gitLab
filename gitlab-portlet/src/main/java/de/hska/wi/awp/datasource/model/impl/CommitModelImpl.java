package de.hska.wi.awp.datasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.hska.wi.awp.datasource.model.Commit;
import de.hska.wi.awp.datasource.model.CommitModel;
import de.hska.wi.awp.datasource.model.CommitSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Commit service. Represents a row in the &quot;gitlab_Commit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.model.CommitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommitImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CommitImpl
 * @see de.hska.wi.awp.datasource.model.Commit
 * @see de.hska.wi.awp.datasource.model.CommitModel
 * @generated
 */
@JSON(strict = true)
public class CommitModelImpl extends BaseModelImpl<Commit>
    implements CommitModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a commit model instance should use the {@link de.hska.wi.awp.datasource.model.Commit} interface instead.
     */
    public static final String TABLE_NAME = "gitlab_Commit";
    public static final Object[][] TABLE_COLUMNS = {
            { "commitId", Types.VARCHAR },
            { "authorName", Types.VARCHAR },
            { "authorEmail", Types.VARCHAR },
            { "titleCommit", Types.VARCHAR },
            { "createdAt", Types.VARCHAR },
            { "projectName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table gitlab_Commit (commitId VARCHAR(75) not null primary key,authorName VARCHAR(75) null,authorEmail VARCHAR(75) null,titleCommit VARCHAR(75) null,createdAt VARCHAR(75) null,projectName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table gitlab_Commit";
    public static final String ORDER_BY_JPQL = " ORDER BY commit.commitId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY gitlab_Commit.commitId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.model.Commit"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.model.Commit"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.hska.wi.awp.datasource.model.Commit"),
            true);
    public static long AUTHORNAME_COLUMN_BITMASK = 1L;
    public static long PROJECTNAME_COLUMN_BITMASK = 2L;
    public static long COMMITID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.model.Commit"));
    private static ClassLoader _classLoader = Commit.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Commit.class };
    private String _commitId;
    private String _authorName;
    private String _originalAuthorName;
    private String _authorEmail;
    private String _titleCommit;
    private String _createdAt;
    private String _projectName;
    private String _originalProjectName;
    private long _columnBitmask;
    private Commit _escapedModel;

    public CommitModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Commit toModel(CommitSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Commit model = new CommitImpl();

        model.setCommitId(soapModel.getCommitId());
        model.setAuthorName(soapModel.getAuthorName());
        model.setAuthorEmail(soapModel.getAuthorEmail());
        model.setTitleCommit(soapModel.getTitleCommit());
        model.setCreatedAt(soapModel.getCreatedAt());
        model.setProjectName(soapModel.getProjectName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Commit> toModels(CommitSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Commit> models = new ArrayList<Commit>(soapModels.length);

        for (CommitSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _commitId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setCommitId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _commitId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Commit.class;
    }

    @Override
    public String getModelClassName() {
        return Commit.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("commitId", getCommitId());
        attributes.put("authorName", getAuthorName());
        attributes.put("authorEmail", getAuthorEmail());
        attributes.put("titleCommit", getTitleCommit());
        attributes.put("createdAt", getCreatedAt());
        attributes.put("projectName", getProjectName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String commitId = (String) attributes.get("commitId");

        if (commitId != null) {
            setCommitId(commitId);
        }

        String authorName = (String) attributes.get("authorName");

        if (authorName != null) {
            setAuthorName(authorName);
        }

        String authorEmail = (String) attributes.get("authorEmail");

        if (authorEmail != null) {
            setAuthorEmail(authorEmail);
        }

        String titleCommit = (String) attributes.get("titleCommit");

        if (titleCommit != null) {
            setTitleCommit(titleCommit);
        }

        String createdAt = (String) attributes.get("createdAt");

        if (createdAt != null) {
            setCreatedAt(createdAt);
        }

        String projectName = (String) attributes.get("projectName");

        if (projectName != null) {
            setProjectName(projectName);
        }
    }

    @JSON
    @Override
    public String getCommitId() {
        if (_commitId == null) {
            return StringPool.BLANK;
        } else {
            return _commitId;
        }
    }

    @Override
    public void setCommitId(String commitId) {
        _commitId = commitId;
    }

    @JSON
    @Override
    public String getAuthorName() {
        if (_authorName == null) {
            return StringPool.BLANK;
        } else {
            return _authorName;
        }
    }

    @Override
    public void setAuthorName(String authorName) {
        _columnBitmask |= AUTHORNAME_COLUMN_BITMASK;

        if (_originalAuthorName == null) {
            _originalAuthorName = _authorName;
        }

        _authorName = authorName;
    }

    public String getOriginalAuthorName() {
        return GetterUtil.getString(_originalAuthorName);
    }

    @JSON
    @Override
    public String getAuthorEmail() {
        if (_authorEmail == null) {
            return StringPool.BLANK;
        } else {
            return _authorEmail;
        }
    }

    @Override
    public void setAuthorEmail(String authorEmail) {
        _authorEmail = authorEmail;
    }

    @JSON
    @Override
    public String getTitleCommit() {
        if (_titleCommit == null) {
            return StringPool.BLANK;
        } else {
            return _titleCommit;
        }
    }

    @Override
    public void setTitleCommit(String titleCommit) {
        _titleCommit = titleCommit;
    }

    @JSON
    @Override
    public String getCreatedAt() {
        if (_createdAt == null) {
            return StringPool.BLANK;
        } else {
            return _createdAt;
        }
    }

    @Override
    public void setCreatedAt(String createdAt) {
        _createdAt = createdAt;
    }

    @JSON
    @Override
    public String getProjectName() {
        if (_projectName == null) {
            return StringPool.BLANK;
        } else {
            return _projectName;
        }
    }

    @Override
    public void setProjectName(String projectName) {
        _columnBitmask |= PROJECTNAME_COLUMN_BITMASK;

        if (_originalProjectName == null) {
            _originalProjectName = _projectName;
        }

        _projectName = projectName;
    }

    public String getOriginalProjectName() {
        return GetterUtil.getString(_originalProjectName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Commit toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Commit) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CommitImpl commitImpl = new CommitImpl();

        commitImpl.setCommitId(getCommitId());
        commitImpl.setAuthorName(getAuthorName());
        commitImpl.setAuthorEmail(getAuthorEmail());
        commitImpl.setTitleCommit(getTitleCommit());
        commitImpl.setCreatedAt(getCreatedAt());
        commitImpl.setProjectName(getProjectName());

        commitImpl.resetOriginalValues();

        return commitImpl;
    }

    @Override
    public int compareTo(Commit commit) {
        String primaryKey = commit.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Commit)) {
            return false;
        }

        Commit commit = (Commit) obj;

        String primaryKey = commit.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        CommitModelImpl commitModelImpl = this;

        commitModelImpl._originalAuthorName = commitModelImpl._authorName;

        commitModelImpl._originalProjectName = commitModelImpl._projectName;

        commitModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Commit> toCacheModel() {
        CommitCacheModel commitCacheModel = new CommitCacheModel();

        commitCacheModel.commitId = getCommitId();

        String commitId = commitCacheModel.commitId;

        if ((commitId != null) && (commitId.length() == 0)) {
            commitCacheModel.commitId = null;
        }

        commitCacheModel.authorName = getAuthorName();

        String authorName = commitCacheModel.authorName;

        if ((authorName != null) && (authorName.length() == 0)) {
            commitCacheModel.authorName = null;
        }

        commitCacheModel.authorEmail = getAuthorEmail();

        String authorEmail = commitCacheModel.authorEmail;

        if ((authorEmail != null) && (authorEmail.length() == 0)) {
            commitCacheModel.authorEmail = null;
        }

        commitCacheModel.titleCommit = getTitleCommit();

        String titleCommit = commitCacheModel.titleCommit;

        if ((titleCommit != null) && (titleCommit.length() == 0)) {
            commitCacheModel.titleCommit = null;
        }

        commitCacheModel.createdAt = getCreatedAt();

        String createdAt = commitCacheModel.createdAt;

        if ((createdAt != null) && (createdAt.length() == 0)) {
            commitCacheModel.createdAt = null;
        }

        commitCacheModel.projectName = getProjectName();

        String projectName = commitCacheModel.projectName;

        if ((projectName != null) && (projectName.length() == 0)) {
            commitCacheModel.projectName = null;
        }

        return commitCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{commitId=");
        sb.append(getCommitId());
        sb.append(", authorName=");
        sb.append(getAuthorName());
        sb.append(", authorEmail=");
        sb.append(getAuthorEmail());
        sb.append(", titleCommit=");
        sb.append(getTitleCommit());
        sb.append(", createdAt=");
        sb.append(getCreatedAt());
        sb.append(", projectName=");
        sb.append(getProjectName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.model.Commit");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>commitId</column-name><column-value><![CDATA[");
        sb.append(getCommitId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorName</column-name><column-value><![CDATA[");
        sb.append(getAuthorName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorEmail</column-name><column-value><![CDATA[");
        sb.append(getAuthorEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>titleCommit</column-name><column-value><![CDATA[");
        sb.append(getTitleCommit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdAt</column-name><column-value><![CDATA[");
        sb.append(getCreatedAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projectName</column-name><column-value><![CDATA[");
        sb.append(getProjectName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
